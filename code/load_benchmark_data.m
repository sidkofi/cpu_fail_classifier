function [data, run_data] = load_benchmark_data(filename)
% LOAD_BENCHMARK_DATA Loads CPU benchmark data
%   This function loads data generated by the synthetic data generation
%   function
%
%   Parameters:
%       filename: Path to the CSV file (default: 'benchmark_data.csv')
%
%   Returns:
%       data: Full dataset as a table
%       run_data: Cell array with data separated by Run_ID
%
%   Example usage:
%       [data, run_data] = load_benchmark_data();
%       [data, run_data] = load_benchmark_data('my_data.csv');

% set defaults
if nargin < 1 || isempty(filename)
    filename = 'benchmark_data.csv';
end

% Load the data
try
    data = readtable(filename);
    fprintf('Loaded data from %s\n', filename);
    fprintf('Dataset contains %d samples across %d runs\n', height(data), length(unique(data.Run_ID)));
catch e
    error('Error loading file %s: %s', filename, e.message);
end

% Ensure failure type iso categorical
if ~iscategorical(data.Failure_Type)
    if isnumeric(data.Failure_Type)
        data.Failure_Type = categorical(data.Failure_Type, 0:4, {'None', 'Thermal_Throttling', 'Frequency_Oscillation', 'Stuck_Frequency', 'Temperature_Spike'});
    else
        data.Failure_Type = categorical(data.Failure_Type);
    end
end

% Print info about the data
fprintf('Failure distribution:\n');
for i = 1:length(categories(data.Failure_Type))
    cat = categories(data.Failure_Type);
    fprintf('  %s: %d runs\n', cat{i}, length(unique(data.Run_ID(data.Failure_Type == cat{i}))));
end

% Separate data by run
run_ids = unique(data.Run_ID);
run_data = cell(length(run_ids), 1);

for i = 1:length(run_ids)
    run_data{i} = data(data.Run_ID == run_ids(i), :);
end

fprintf('Data loaded successfully\n');
end